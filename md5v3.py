import os
import telebot
from telebot import types
from datetime import datetime, timedelta
import json
import math
import numpy as np
import re
import hashlib
from collections import defaultdict
import time
import random
import asyncio

# ==============================================
# C·∫§U H√åNH H·ªÜ TH·ªêNG
# ==============================================
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
ADMIN_ID = 7780640154
LIEN_HE_HO_TRO = "@huydev"
NHOM_YEU_CAU = ["@techtitansteam"]
MA_VIP = "VIP7NGAYMIENPHI"
TEN_BOT = "botmd5v2pro_bot"
SERVER_TRANG_THAI = True  # True: B·∫≠t, False: T·∫Øt

bot = telebot.TeleBot(TOKEN)

# Bi·ªÉu t∆∞·ª£ng ph·∫£n h·ªìi ƒë·ªông
PHAN_HOI_EMOJI = ["üåå", "üöÄ", "ü™ê", "‚≠ê", "üí´"]

# Bi·ªÉu t∆∞·ª£ng giao di·ªán hi·ªán ƒë·∫°i
BI·ªÇU_T∆Ø·ª¢NG = {
    "thanh_cong": "‚úÖ", "loi": "‚ùå", "thong_tin": "‚ÑπÔ∏è", "canh_bao": "‚ö†Ô∏è", "vip": "üíé",
    "khoa": "üîí", "mo_khoa": "üîì", "dong_ho": "‚è≥", "thong_ke": "üìä", "lich_su": "üìú",
    "nguoi_dung": "üë§", "quan_tri": "üõ°Ô∏è", "phat_tin": "üì°", "moi_ban": "üì©", "nhom": "üë•",
    "tai": "üé∞", "xiu": "üé≤", "dong_co": "‚öôÔ∏è", "r·ªßi_ro": "üö®", "thoi_gian": "‚è∞",
    "dung": "‚úîÔ∏è", "sai": "‚ùå", "phan_tich": "üîç", "moi": "üì¨", "tro_giup": "üÜò"
}

# ==============================================
# QU·∫¢N L√ù C∆† S·ªû D·ªÆ LI·ªÜU
# ==============================================
class CoSoDuLieu:
    @staticmethod
    def tai(filename):
        try:
            with open(f'{filename}.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    @staticmethod
    def luu(data, filename):
        try:
            with open(f'{filename}.json', 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"L·ªói l∆∞u {filename}: {e}")

# Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
nguoi_dung = CoSoDuLieu.tai('nguoi_dung')
lich_su = CoSoDuLieu.tai('lich_su')
hoat_dong = CoSoDuLieu.tai('hoat_dong')
ma_vip_db = CoSoDuLieu.tai('ma_vip')
moi_ban_db = CoSoDuLieu.tai('moi_ban')
cau_hinh_db = CoSoDuLieu.tai('cau_hinh')
che_do_dao = cau_hinh_db.get('che_do_dao', False)

# ==============================================
# TI·ªÜN √çCH H·ªÜ TH·ªêNG
# ==============================================
async def kiem_tra_tham_gia_nhom(user_id):
    nhom_thieu = []
    cache_key = f"nhom_{user_id}"
    cache = CoSoDuLieu.tai('cache_nhom').get(cache_key, {})
    thoi_gian_cache = cache.get('thoi_gian', 0)
    
    if time.time() - thoi_gian_cache < 120:  # Cache 120 gi√¢y
        return cache.get('nhom_thieu', NHOM_YEU_CAU)
    
    for nhom in NHOM_YEU_CAU:
        for attempt in range(3):  # Th·ª≠ l·∫°i 3 l·∫ßn
            try:
                thanh_vien = await bot.get_chat_member(nhom, user_id)
                if thanh_vien.status not in ['member', 'administrator', 'creator']:
                    nhom_thieu.append(nhom)
                break
            except telebot.apihelper.ApiTelegramException as e:
                if "rate limit" in str(e).lower():
                    await asyncio.sleep(1)
                    continue
                nhom_thieu.append(nhom)
                break
    
    cache_nhom = CoSoDuLieu.tai('cache_nhom')
    cache_nhom[cache_key] = {
        'nhom_thieu': nhom_thieu,
        'thoi_gian': time.time()
    }
    CoSoDuLieu.luu(cache_nhom, 'cache_nhom')
    
    return nhom_thieu

def kich_hoat_vip(uid, days=7, mo_rong=False):
    uid = str(uid)
    nguoi_dung[uid] = nguoi_dung.get(uid, {})
    if mo_rong and nguoi_dung[uid].get("vip_het_han"):
        try:
            het_han_hien_tai = datetime.strptime(nguoi_dung[uid]["vip_het_han"], "%Y-%m-%d %H:%M:%S")
            ngay_het_han = (max(datetime.now(), het_han_hien_tai) + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
        except:
            ngay_het_han = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    else:
        ngay_het_han = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    
    nguoi_dung[uid]["vip_kich_hoat"] = True
    nguoi_dung[uid]["vip_het_han"] = ngay_het_han
    nguoi_dung[uid]["lan_hoat_dong_cuoi"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    CoSoDuLieu.luu(nguoi_dung, 'nguoi_dung')
    return ngay_het_han

def tao_ma_vip(ma_ten, days, so_lan_su_dung_toi_da=1):
    ma_vip_db[ma_ten] = {
        "days": days,
        "so_lan_su_dung_toi_da": so_lan_su_dung_toi_da,
        "so_lan_su_dung": 0,
        "ngay_tao": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "nguoi_su_dung": []
    }
    CoSoDuLieu.luu(ma_vip_db, 'ma_vip')
    return ma_vip_db[ma_ten]

def su_dung_ma_vip(ma_ten, user_id):
    if ma_ten not in ma_vip_db:
        return False, f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} M√£ kh√¥ng h·ª£p l·ªá!"
    ma = ma_vip_db[ma_ten]
    user_id = str(user_id)
    if user_id in ma["nguoi_su_dung"]:
        return False, f"{BI·ªÇU_T∆Ø·ª¢NG['canh_bao']} B·∫°n ƒë√£ d√πng m√£ n√†y r·ªìi!"
    if ma["so_lan_su_dung"] >= ma["so_lan_su_dung_toi_da"]:
        return False, f"{BI·ªÇU_T∆Ø·ª¢NG['dong_ho']} M√£ ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng!"
    
    mo_rong = user_id in nguoi_dung and nguoi_dung[user_id].get("vip_kich_hoat")
    ngay_het_han = kich_hoat_vip(user_id, ma["days"], mo_rong)
    ma["so_lan_su_dung"] += 1
    ma["nguoi_su_dung"].append(user_id)
    CoSoDuLieu.luu(ma_vip_db, 'ma_vip')
    return True, f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} K√≠ch ho·∫°t VIP {ma['days']} ng√†y!\n{BI·ªÇU_T∆Ø·ª¢NG['dong_ho']} H·∫øt h·∫°n: {ngay_het_han}"

def theo_doi_hoat_dong(user_id, hanh_dong):
    user_id = str(user_id)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    hoat_dong[user_id] = hoat_dong.get(user_id, {
        "lan_dau_xem": now,
        "lan_cuoi_xem": now,
        "so_lan_yeu_cau": 0,
        "hanh_dong": []
    })
    hoat_dong[user_id]["lan_cuoi_xem"] = now
    hoat_dong[user_id]["so_lan_yeu_cau"] += 1
    hoat_dong[user_id]["hanh_dong"].append(hanh_dong)
    CoSoDuLieu.luu(hoat_dong, 'hoat_dong')

def tao_ma_moi_ban(user_id):
    ma = f"MOI1NGAY_{user_id}_{int(time.time())}"
    tao_ma_vip(ma, 1, 1)
    return ma

def theo_doi_moi_ban(nguoi_moi_id, nguoi_duoc_moi_id):
    nguoi_moi_id = str(nguoi_moi_id)
    nguoi_duoc_moi_id = str(nguoi_duoc_moi_id)
    
    if nguoi_moi_id not in moi_ban_db:
        moi_ban_db[nguoi_moi_id] = []
    
    if nguoi_duoc_moi_id not in moi_ban_db[nguoi_moi_id]:
        moi_ban_db[nguoi_moi_id].append(nguoi_duoc_moi_id)
        CoSoDuLieu.luu(moi_ban_db, 'moi_ban')
        
        ma_thuong = tao_ma_moi_ban(nguoi_moi_id)
        try:
            bot.send_message(
                nguoi_moi_id,
                f"""
{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} <b>M·ªùi B·∫°n Th√†nh C√¥ng!</b>
{BI·ªÇU_T∆Ø·ª¢NG['nguoi_dung']} B·∫°n ƒë√£ m·ªùi ID {nguoi_duoc_moi_id}!
{BI·ªÇU_T∆Ø·ª¢NG['moi']} M√£ th∆∞·ªüng: <code>{ma_thuong}</code>
{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} D√πng: /ma {ma_thuong}
                """,
                parse_mode="HTML"
            )
        except:
            pass

def kiem_tra_vip_kich_hoat(user_id):
    user_id = str(user_id)
    if user_id in nguoi_dung and nguoi_dung[user_id].get("vip_kich_hoat", False):
        het_han = nguoi_dung[user_id].get("vip_het_han", "N/A")
        try:
            if datetime.now() <= datetime.strptime(het_han, "%Y-%m-%d %H:%M:%S"):
                return True
        except:
            return False
    return False

# ==============================================
# ƒê·ªòNG C∆† PH√ÇN T√çCH MD5
# ==============================================
class PhanTichMD5:
    @staticmethod
    def dong_co_sieu_tri_tue(md5_hash):
        md5_hash = md5_hash.lower().strip()
        if len(md5_hash) != 32 or not re.match(r'^[a-f0-9]{32}$', md5_hash):
            raise ValueError("M√£ MD5 kh√¥ng h·ª£p l·ªá!")
        
        hex_bytes = [int(md5_hash[i:i+2], 16) for i in range(0, len(md5_hash), 2)]
        byte_array = np.array(hex_bytes)
        tong = sum(hex_bytes)

        # Thu·∫≠t to√°n 1: Hyper-AI Engine
        tong_luong_tu = sum(byte_array[i] * math.cos(i * math.pi/16) for i in range(16))
        diem_neural = sum(byte_array[i] * (1.618 ** (i % 5)) for i in range(16))
        chieu_ph√¢n_h√¨nh = sum(byte_array[i] * (1 + math.sqrt(5)) / 2 for i in range(16))
        diem1 = (tong_luong_tu + diem_neural + chieu_ph√¢n_h√¨nh) % 20
        ket_qua1 = "T√ÄI" if diem1 < 10 else "X·ªàU"
        xac_suat1 = 95 - abs(diem1 - 10) * 4.5 if diem1 < 10 else 50 + (diem1 - 10) * 4.5

        # Thu·∫≠t to√°n 2: Diamond Engine
        nums = [int(c, 16) for c in md5_hash]
        trung_binh = sum(nums) / 32
        so_chan = sum(1 for n in nums if n % 2 == 0)
        tren_8 = sum(1 for n in nums if n > 8)
        diem2 = (1 if trung_binh > 7.5 else 0) + (1 if so_chan > 16 else 0) + (1 if tren_8 >= 10 else 0)
        ket_qua2 = "T√ÄI" if diem2 >= 2 else "X·ªàU"
        xac_suat2 = 90 if diem2 == 3 else 75 if diem2 == 2 else 60
        xac_suat2 = xac_suat2 if ket_qua2 == "T√ÄI" else 100 - xac_suat2

        # Thu·∫≠t to√°n 3: Titans Tech
        x = int(md5_hash, 16)
        ket_qua3 = "T√ÄI" if x % 2 == 0 else "X·ªàU"
        xac_suat3 = 75.0

        # K·∫øt qu·∫£ cu·ªëi
        trong_so = [0.5, 0.3, 0.2]
        diem_cuoi = (diem1 * trong_so[0] + diem2 * 5 * trong_so[1] + (0 if ket_qua3 == "X·ªàU" else 10) * trong_so[2])
        ket_qua_cuoi = "T√ÄI" if diem_cuoi < 10 else "X·ªàU"
        xac_suat_cuoi = (xac_suat1 * trong_so[0] + xac_suat2 * trong_so[1] + xac_suat3 * trong_so[2])
        
        if che_do_dao:
            ket_qua_cuoi = "X·ªàU" if ket_qua_cuoi == "T√ÄI" else "T√ÄI"
            xac_suat_cuoi = 100 - xac_suat_cuoi

        muc_do_rui_ro = "TH·∫§P" if xac_suat_cuoi > 80 else "TRUNG B√åNH" if xac_suat_cuoi > 60 else "CAO"
        
        return {
            "tong": tong,
            "thuattoan1": {"ket_qua": ket_qua1, "xac_suat": f"{xac_suat1:.1f}%", "diem": diem1},
            "thuattoan2": {"ket_qua": ket_qua2, "xac_suat": f"{xac_suat2:.1f}%", "diem": diem2},
            "thuattoan3": {"ket_qua": ket_qua3, "xac_suat": f"{xac_suat3:.1f}%", "diem": x % 2},
            "cuoi": {"ket_qua": ket_qua_cuoi, "xac_suat": f"{xac_suat_cuoi:.1f}%"},
            "rui_ro": muc_do_rui_ro,
            "thoi_gian": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "da_dao": che_do_dao
        }

# ==============================================
# GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (THI·∫æT K·∫æ V≈® TR·ª§)
# ==============================================
class GiaoDienNguoiDung:
    @staticmethod
    def tao_menu_chinh():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['phan_tich']} Ph√¢n T√≠ch MD5"),
            types.KeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['vip']} Tr·∫°ng Th√°i VIP")
        )
        markup.add(
            types.KeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['thong_ke']} Th·ªëng K√™"),
            types.KeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['lich_su']} L·ªãch S·ª≠")
        )
        markup.add(
            types.KeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['moi_ban']} M·ªùi B·∫°n"),
            types.KeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['tro_giup']} Tr·ª£ Gi√∫p")
        )
        return markup

    @staticmethod
    def tao_menu_tuong_tac():
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['tro_giup']} Tr·ª£ Gi√∫p", callback_data="menu_tro_giup"),
            types.InlineKeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['phan_tich']} Ph√¢n T√≠ch", callback_data="menu_phan_tich")
        )
        return markup

    @staticmethod
    def tao_bao_cao_phan_tich(md5_input, phan_tich):
        che_do = "ƒê·∫¢O" if phan_tich["da_dao"] else "B√åNH TH∆Ø·ªúNG"
        return (
            f"üåå <b>Hyper-AI Analysis</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng Tin Ph√¢n T√≠ch ‚ïê‚ïê‚ïê\n"
            f"ü™ê Version: Si√™u Tr√≠ Tu·ªá 7 Pro\n"
            f"üîí MD5: <code>{md5_input[:8]}...{md5_input[-8:]}</code>\n"
            f"üìä T·ªïng HEX: <code>{phan_tich['tong']}</code>\n"
            f"‚öôÔ∏è Ch·∫ø ƒë·ªô: <code>{che_do}</code>\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ Thu·∫≠t To√°n ‚ïê‚ïê‚ïê\n"
            f"üåü <b>Hyper-AI Engine</b>\n"
            f"   {BI·ªÇU_T∆Ø·ª¢NG['tai' if phan_tich['thuattoan1']['ket_qua'] == 'T√ÄI' else 'xiu']} D·ª± ƒëo√°n: <b>{phan_tich['thuattoan1']['ket_qua']}</b>\n"
            f"   üìà X√°c su·∫•t: <code>{phan_tich['thuattoan1']['xac_suat']}</code>\n"
            f"üíé <b>Diamond Engine</b>\n"
            f"   {BI·ªÇU_T∆Ø·ª¢NG['tai' if phan_tich['thuattoan2']['ket_qua'] == 'T√ÄI' else 'xiu']} D·ª± ƒëo√°n: <b>{phan_tich['thuattoan2']['ket_qua']}</b>\n"
            f"   üìà X√°c su·∫•t: <code>{phan_tich['thuattoan2']['xac_suat']}</code>\n"
            f"üõ∏ <b>Titans Tech</b>\n"
            f"   {BI·ªÇU_T∆Ø·ª¢NG['tai' if phan_tich['thuattoan3']['ket_qua'] == 'T√ÄI' else 'xiu']} D·ª± ƒëo√°n: <b>{phan_tich['thuattoan3']['ket_qua']}</b>\n"
            f"   üìà X√°c su·∫•t: <code>{phan_tich['thuattoan3']['xac_suat']}</code>\n"
            f"‚ïê‚ïê‚ïê ƒêi·ªÉm Thu·∫≠t To√°n ‚ïê‚ïê‚ïê\n"
            f"üåü Hyper-AI: <code>{phan_tich['thuattoan1']['diem']:.2f}</code>\n"
            f"üíé Diamond: <code>{phan_tich['thuattoan2']['diem']:.2f}</code>\n"
            f"üõ∏ Titans: <code>{phan_tich['thuattoan3']['diem']:.2f}</code>\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ Cu·ªëi ‚ïê‚ïê‚ïê\n"
            f"üéØ D·ª± ƒëo√°n: <b>{phan_tich['cuoi']['ket_qua']}</b>\n"
            f"üìà ƒê·ªô tin c·∫≠y: <code>{phan_tich['cuoi']['xac_suat']}</code>\n"
            f"üö® R·ªßi ro: <b>{phan_tich['rui_ro']}</b>\n"
            f"‚è∞ Th·ªùi gian: {phan_tich['thoi_gian']}"
        )

# ==============================================
# QU·∫¢N L√ù D·ªÆ LI·ªÜU
# ==============================================
def luu_du_doan(user_id, md5, phan_tich, la_dung=None):
    user_id = str(user_id)
    lich_su[user_id] = lich_su.get(user_id, [])
    lich_su[user_id].append({
        "md5": md5,
        "du_doan": phan_tich,
        "thoi_gian": phan_tich["thoi_gian"],
        "la_dung": la_dung,
        "cho_phan_hoi": True if la_dung is None else False
    })
    if len(lich_su[user_id]) > 100:
        lich_su[user_id] = lich_su[user_id][-100:]
    CoSoDuLieu.luu(lich_su, 'lich_su')

def kiem_tra_trang_thai_phan_hoi(user_id):
    user_id = str(user_id)
    if user_id in lich_su:
        for muc in lich_su[user_id]:
            if muc.get("cho_phan_hoi", False):
                return True, muc["md5"]
    return False, None

def lay_thong_ke_nguoi_dung(user_id):
    user_id = str(user_id)
    if user_id not in lich_su or not lich_su[user_id]:
        return None
    lich_su_nguoi_dung = lich_su[user_id]
    tong = len(lich_su_nguoi_dung)
    dung = sum(1 for muc in lich_su_nguoi_dung if muc.get("la_dung") is True)
    sai = sum(1 for muc in lich_su_nguoi_dung if muc.get("la_dung") is False)
    do_chinh_xac = dung / tong * 100 if tong > 0 else 0
    return {
        "tong": tong,
        "dung": dung,
        "sai": sai,
        "do_chinh_xac": do_chinh_xac
    }

# ==============================================
# PH·∫¢N H·ªíI ƒê·ªòNG
# ==============================================
async def gui_phan_hoi_voi_emoji(chat_id, tin_nhan, noi_dung, reply_markup=None):
    tin_nhan_bieu_tuong = await bot.send_message(chat_id, random.choice(PHAN_HOI_EMOJI), reply_to_message_id=tin_nhan.message_id)
    await bot.send_chat_action(chat_id, 'typing')
    await asyncio.sleep(random.uniform(0.5, 1.5))
    random_emoji = random.choice(PHAN_HOI_EMOJI)
    await bot.send_message(
        chat_id,
        f"{random_emoji} {noi_dung}",
        parse_mode="HTML",
        reply_markup=reply_markup,
        reply_to_message_id=tin_nhan.message_id
    )
    await asyncio.sleep(2)
    try:
        await bot.delete_message(chat_id, tin_nhan_bieu_tuong.message_id)
    except:
        pass

def gui_phan_hoi_dong_bo(chat_id, tin_nhan, noi_dung, reply_markup=None):
    asyncio.run(gui_phan_hoi_voi_emoji(chat_id, tin_nhan, noi_dung, reply_markup))

# ==============================================
# X·ª¨ L√ù L·ªÜNH
# ==============================================
@bot.message_handler(commands=['start'])
def xu_ly_bat_dau(tin_nhan):
    if not SERVER_TRANG_THAI and tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Bot Offline</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Bot hi·ªán ƒëang t·∫Øt!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    
    if len(tin_nhan.text.split()) > 1:
        nguoi_moi_id = tin_nhan.text.split()[1]
        if nguoi_moi_id != str(tin_nhan.from_user.id):
            theo_doi_moi_ban(nguoi_moi_id, tin_nhan.from_user.id)
    
    ten = tin_nhan.from_user.first_name or "Nh√† Th√°m Hi·ªÉm"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['nhom']} X√°c Minh Nh√≥m", callback_data="x√°c_minh_nh√≥m"))
    noi_dung = (
        f"üåå <b>Ch√†o {ten}!</b> üåå\n"
        f"‚ïê‚ïê‚ïê B·∫Øt ƒê·∫ßu H√†nh Tr√¨nh ‚ïê‚ïê‚ïê\n"
        f"üöÄ Tham gia nh√≥m ƒë·ªÉ nh·∫≠n <b>VIP 7 ng√†y mi·ªÖn ph√≠</b>!\n"
        f"{''.join(f'{BI·ªÇU_T∆Ø·ª¢NG['nhom']} {nhom}\n' for nhom in NHOM_YEU_CAU)}"
        f"ü™ê Nh·∫•n n√∫t ƒë·ªÉ x√°c minh v√† nh·∫≠n m√£!"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, markup)
    theo_doi_hoat_dong(tin_nhan.from_user.id, "b·∫Øt_ƒë·∫ßu")

@bot.message_handler(commands=['ma'])
def xu_ly_ma(tin_nhan):
    if not SERVER_TRANG_THAI and tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Bot Offline</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Bot hi·ªán ƒëang t·∫Øt!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    
    phan = tin_nhan.text.split()
    if len(phan) != 2:
        noi_dung = (
            f"üåå <b>L·ªói C√∫ Ph√°p</b> üåå\n"
            f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Nh·∫≠p: /ma [m√£]\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    thanh_cong, thong_bao = su_dung_ma_vip(phan[1].upper(), tin_nhan.from_user.id)
    noi_dung = (
        f"üåå <b>K√≠ch Ho·∫°t VIP</b> üåå\n"
        f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
        f"{thong_bao}"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, f"s·ª≠_d·ª•ng_m√£:{phan[1]}")

@bot.message_handler(commands=['admin'])
def xu_ly_admin(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    noi_dung = (
        f"üåå <b>Admin Control Panel</b> üåå\n"
        f"‚ïê‚ïê‚ïê L·ªánh Qu·∫£n Tr·ªã ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /cam [user_id] - C·∫•m ng∆∞·ªùi d√πng\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /bo_cam [user_id] - B·ªè c·∫•m ng∆∞·ªùi d√πng\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /thong_tin_nguoi_dung [user_id] - Xem th√¥ng tin ng∆∞·ªùi d√πng\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /kich_hoat [id] [ng√†y] - K√≠ch ho·∫°t VIP\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /huy_kich_hoat [id] - H·ªßy VIP\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /tao_ma [m√£] [ng√†y] [l∆∞·ª£t] - T·∫°o m√£ VIP\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /danh_sach_ma - Xem danh s√°ch m√£ VIP\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /gui [th√¥ng_ƒëi·ªáp] - Ph√°t tin nh·∫Øn\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /thong_ke - Th·ªëng k√™ h·ªá th·ªëng\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /dao - B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô ƒë·∫£o\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /danh_sach_nguoi_dung - Xem danh s√°ch ng∆∞·ªùi d√πng\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /xoa_lich_su [user_id] - X√≥a l·ªãch s·ª≠ ng∆∞·ªùi d√πng\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /onserver - B·∫≠t bot cho t·∫•t c·∫£\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} /stopserver - T·∫Øt bot v·ªõi ng∆∞·ªùi d√πng th∆∞·ªùng"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, "admin")

@bot.message_handler(commands=['onserver'])
def xu_ly_onserver(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    global SERVER_TRANG_THAI
    SERVER_TRANG_THAI = True
    cau_hinh_db['server_trang_thai'] = SERVER_TRANG_THAI
    CoSoDuLieu.luu(cau_hinh_db, 'cau_hinh')
    noi_dung = (
        f"üåå <b>Server Status</b> üåå\n"
        f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} Bot ƒë√£ ƒë∆∞·ª£c b·∫≠t cho t·∫•t c·∫£ ng∆∞·ªùi d√πng!"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, "b·∫≠t_server")

@bot.message_handler(commands=['stopserver'])
def xu_ly_stopserver(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    global SERVER_TRANG_THAI
    SERVER_TRANG_THAI = False
    cau_hinh_db['server_trang_thai'] = SERVER_TRANG_THAI
    CoSoDuLieu.luu(cau_hinh_db, 'cau_hinh')
    noi_dung = (
        f"üåå <b>Server Status</b> üåå\n"
        f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} Bot ƒë√£ t·∫Øt v·ªõi ng∆∞·ªùi d√πng th∆∞·ªùng!\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Admin v·∫´n c√≥ th·ªÉ s·ª≠ d·ª•ng."
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, "t·∫Øt_server")

@bot.message_handler(commands=['quan_tri'])
def xu_ly_quan_tri(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    noi_dung = (
        f"üåå <b>Admin Control Panel</b> üåå\n"
        f"‚ïê‚ïê‚ïê L·ªánh Qu·∫£n Tr·ªã ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['quan_tri']} D√πng /admin ƒë·ªÉ xem danh s√°ch l·ªánh ƒë·∫ßy ƒë·ªß!"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, "quan_tri")

@bot.message_handler(commands=['cam'])
def xu_ly_cam(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    phan = tin_nhan.text.split()
    if len(phan) != 2:
        noi_dung = (
            f"üåå <b>L·ªói C√∫ Ph√°p</b> üåå\n"
            f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Nh·∫≠p: /cam [user_id]\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    uid = phan[1]
    nguoi_dung[uid] = nguoi_dung.get(uid, {})
    nguoi_dung[uid]["bi_cam"] = True
    CoSoDuLieu.luu(nguoi_dung, 'nguoi_dung')
    try:
        bot.send_message(uid, f"üåå <b>B·ªã C·∫•m!</b> üåå\n‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n{BI·ªÇU_T∆Ø·ª¢NG['loi']} T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m!", parse_mode="HTML")
    except:
        pass
    noi_dung = (
        f"üåå <b>Qu·∫£n L√Ω Ng∆∞·ªùi D√πng</b> üåå\n"
        f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} ƒê√£ c·∫•m ID <code>{uid}</code>"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, f"c·∫•m:{uid}")

@bot.message_handler(commands=['bo_cam'])
def xu_ly_bo_cam(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    phan = tin_nhan.text.split()
    if len(phan) != 2:
        noi_dung = (
            f"üåå <b>L·ªói C√∫ Ph√°p</b> üåå\n"
            f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Nh·∫≠p: /bo_cam [user_id]\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    uid = phan[1]
    if uid in nguoi_dung:
        nguoi_dung[uid]["bi_cam"] = False
        CoSoDuLieu.luu(nguoi_dung, 'nguoi_dung')
        try:
            bot.send_message(uid, f"üåå <b>ƒê√£ B·ªè C·∫•m!</b> üåå\n‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b·ªè c·∫•m!", parse_mode="HTML")
        except:
            pass
        noi_dung = (
            f"üåå <b>Qu·∫£n L√Ω Ng∆∞·ªùi D√πng</b> üåå\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} ƒê√£ b·ªè c·∫•m ID <code>{uid}</code>"
        )
    else:
        noi_dung = (
            f"üåå <b>Qu·∫£n L√Ω Ng∆∞·ªùi D√πng</b> üåå\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} ID <code>{uid}</code> kh√¥ng t·ªìn t·∫°i!"
        )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, f"b·ªè_c·∫•m:{uid}")

@bot.message_handler(commands=['thong_tin_nguoi_dung'])
def xu_ly_thong_tin_nguoi_dung(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    phan = tin_nhan.text.split()
    if len(phan) != 2:
        noi_dung = (
            f"üåå <b>L·ªói C√∫ Ph√°p</b> üåå\n"
            f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Nh·∫≠p: /thong_tin_nguoi_dung [user_id]\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    uid = phan[1]
    if uid not in nguoi_dung:
        noi_dung = (
            f"üåå <b>Th√¥ng Tin Ng∆∞·ªùi D√πng</b> üåå\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} ID <code>{uid}</code> kh√¥ng t·ªìn t·∫°i!"
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    nguoi = nguoi_dung[uid]
    thong_ke = lay_thong_ke_nguoi_dung(uid)
    thong_bao_thong_ke = (
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_ke']} Th·ªëng k√™:\n"
        f"   {BI·ªÇU_T∆Ø·ª¢NG['dung']} ƒê√∫ng: <code>{thong_ke['dung']}</code>\n"
        f"   {BI·ªÇU_T∆Ø·ª¢NG['sai']} Sai: <code>{thong_ke['sai']}</code>\n"
        f"   {BI·ªÇU_T∆Ø·ª¢NG['thong_ke']} ƒê·ªô ch√≠nh x√°c: <code>{thong_ke['do_chinh_xac']:.2f}%</code>"
    ) if thong_ke else f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Kh√¥ng c√≥ th·ªëng k√™"
    noi_dung = (
        f"üåå <b>User Info</b> üåå\n"
        f"‚ïê‚ïê‚ïê Th√¥ng Tin Ng∆∞·ªùi D√πng ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['nguoi_dung']} ID: <code>{uid}</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['vip']} VIP: <code>{'K√≠ch ho·∫°t' if nguoi.get('vip_kich_hoat') else 'Kh√¥ng ho·∫°t ƒë·ªông'}</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['dong_ho']} H·∫øt h·∫°n: <code>{nguoi.get('vip_het_han', 'N/A')}</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['khoa']} B·ªã c·∫•m: <code>{'C√≥' if nguoi.get('bi_cam') else 'Kh√¥ng'}</code>\n"
        f"{thong_bao_thong_ke}"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, f"th√¥ng_tin_nguoi_dung:{uid}")

@bot.message_handler(commands=['danh_sach_nguoi_dung'])
def xu_ly_danh_sach_nguoi_dung(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    if not nguoi_dung:
        noi_dung = (
            f"üåå <b>User List</b> üåå\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o!"
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    danh_sach = [f"üåå <b>User List</b> üåå\n‚ïê‚ïê‚ïê Danh S√°ch Ng∆∞·ªùi D√πng ‚ïê‚ïê‚ïê"]
    for uid, chi_tiet in nguoi_dung.items():
        trang_thai_vip = "K√≠ch ho·∫°t" if chi_tiet.get("vip_kich_hoat") else "Kh√¥ng ho·∫°t ƒë·ªông"
        trang_thai_cam = "B·ªã c·∫•m" if chi_tiet.get("bi_cam") else "Ho·∫°t ƒë·ªông"
        danh_sach.append(
            f"{BI·ªÇU_T∆Ø·ª¢NG['nguoi_dung']} ID: <code>{uid}</code> | {BI·ªÇU_T∆Ø·ª¢NG['vip']} {trang_thai_vip} | {BI·ªÇU_T∆Ø·ª¢NG['khoa']} {trang_thai_cam}"
        )
    noi_dung = "\n".join(danh_sach)
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, "danh_sach_nguoi_dung")

@bot.message_handler(commands=['xoa_lich_su'])
def xu_ly_xoa_lich_su(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    phan = tin_nhan.text.split()
    if len(phan) != 2:
        noi_dung = (
            f"üåå <b>L·ªói C√∫ Ph√°p</b> üåå\n"
            f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Nh·∫≠p: /xoa_lich_su [user_id]\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    uid = phan[1]
    if uid in lich_su:
        del lich_su[uid]
        CoSoDuLieu.luu(lich_su, 'lich_su')
        noi_dung = (
            f"üåå <b>Qu·∫£n L√Ω L·ªãch S·ª≠</b> üåå\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} ƒê√£ x√≥a l·ªãch s·ª≠ c·ªßa ID <code>{uid}</code>"
        )
    else:
        noi_dung = (
            f"üåå <b>Qu·∫£n L√Ω L·ªãch S·ª≠</b> üåå\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ cho ID <code>{uid}</code>"
        )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, f"x√≥a_l·ªãch_s·ª≠:{uid}")

@bot.message_handler(commands=['tro_giup'])
def xu_ly_tro_giup(tin_nhan):
    if not SERVER_TRANG_THAI and tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Bot Offline</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Bot hi·ªán ƒëang t·∫Øt!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    noi_dung = (
        f"üåå <b>H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng</b> üåå\n"
        f"‚ïê‚ïê‚ïê L·ªánh Ng∆∞·ªùi D√πng ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['phan_tich']} /start - B·∫Øt ƒë·∫ßu & nh·∫≠n VIP\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['vip']} /ma [m√£] - K√≠ch ho·∫°t VIP\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_ke']} /thong_ke - Xem th·ªëng k√™ c√° nh√¢n\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['lich_su']} /lich_su - Xem l·ªãch s·ª≠ d·ª± ƒëo√°n\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['moi_ban']} /moi - M·ªùi b·∫°n b√®\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['tro_giup']} /tro_giup - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['nguoi_dung']} /id - Xem th√¥ng tin t√†i kho·∫£n\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['phan_tich']} G·ª≠i m√£ MD5 32 k√Ω t·ª± ƒë·ªÉ ph√¢n t√≠ch\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, GiaoDienNguoiDung.tao_menu_tuong_tac())
    theo_doi_hoat_dong(tin_nhan.from_user.id, "tr·ª£_gi√∫p")

@bot.message_handler(commands=['id'])
def xu_ly_id(tin_nhan):
    if not SERVER_TRANG_THAI and tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Bot Offline</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Bot hi·ªán ƒëang t·∫Øt!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    uid = str(tin_nhan.from_user.id)
    ten = tin_nhan.from_user.first_name or "Kh√¥ng T√™n"
    trang_thai = "Kh√¥ng ho·∫°t ƒë·ªông"
    bieu_tuong_trang_thai = BI·ªÇU_T∆Ø·ª¢NG["khoa"]
    het_han_str = "N/A"
    if uid in nguoi_dung and nguoi_dung[uid].get("vip_kich_hoat", False):
        het_han_str = nguoi_dung[uid].get("vip_het_han", "N/A")
        if datetime.now() <= datetime.strptime(het_han_str, "%Y-%m-%d %H:%M:%S"):
            trang_thai = "K√≠ch ho·∫°t"
            bieu_tuong_trang_thai = BI·ªÇU_T∆Ø·ª¢NG["vip"]
        else:
            trang_thai = "H·∫øt h·∫°n"
            bieu_tuong_trang_thai = BI·ªÇU_T∆Ø·ª¢NG["dong_ho"]
    so_lan_moi = len(moi_ban_db.get(uid, []))
    thong_ke = lay_thong_ke_nguoi_dung(uid)
    thong_bao_thong_ke = (
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_ke']} Th·ªëng k√™:\n"
        f"   {BI·ªÇU_T∆Ø·ª¢NG['dung']} ƒê√∫ng: <code>{thong_ke['dung']}</code>\n"
        f"   {BI·ªÇU_T∆Ø·ª¢NG['sai']} Sai: <code>{thong_ke['sai']}</code>\n"
        f"   {BI·ªÇU_T∆Ø·ª¢NG['thong_ke']} ƒê·ªô ch√≠nh x√°c: <code>{thong_ke['do_chinh_xac']:.2f}%</code>"
    ) if thong_ke else f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Kh√¥ng c√≥ th·ªëng k√™"
    noi_dung = (
        f"üåå <b>User Profile</b> üåå\n"
        f"‚ïê‚ïê‚ïê Th√¥ng Tin T√†i Kho·∫£n ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['nguoi_dung']} T√™n: <code>{ten}</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['nguoi_dung']} ID: <code>{uid}</code>\n"
        f"{bieu_tuong_trang_thai} VIP: <code>{trang_thai}</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['dong_ho']} H·∫øt h·∫°n: <code>{het_han_str}</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['moi_ban']} L∆∞·ª£t m·ªùi: <code>{so_lan_moi}</code>\n"
        f"{thong_bao_thong_ke}\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, GiaoDienNguoiDung.tao_menu_tuong_tac())
    theo_doi_hoat_dong(tin_nhan.from_user.id, "id")

@bot.message_handler(commands=['thong_ke'])
def xu_ly_thong_ke(tin_nhan):
    if not SERVER_TRANG_THAI and tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Bot Offline</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Bot hi·ªán ƒëang t·∫Øt!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    thong_ke = lay_thong_ke_nguoi_dung(tin_nhan.from_user.id)
    if not thong_ke:
        noi_dung = (
            f"üåå <b>Personal Stats</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th·ªëng K√™ C√° Nh√¢n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Kh√¥ng c√≥ th·ªëng k√™!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, GiaoDienNguoiDung.tao_menu_tuong_tac())
        return
    noi_dung = (
        f"üåå <b>Personal Stats</b> üåå\n"
        f"‚ïê‚ïê‚ïê Th·ªëng K√™ C√° Nh√¢n ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['dung']} ƒê√∫ng: <code>{thong_ke['dung']}</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['sai']} Sai: <code>{thong_ke['sai']}</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_ke']} T·ªïng: <code>{thong_ke['tong']}</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_ke']} ƒê·ªô ch√≠nh x√°c: <code>{thong_ke['do_chinh_xac']:.2f}%</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, GiaoDienNguoiDung.tao_menu_tuong_tac())
    theo_doi_hoat_dong(tin_nhan.from_user.id, "th·ªëng_k√™")

@bot.message_handler(commands=['lich_su'])
def xu_ly_lich_su(tin_nhan):
    if not SERVER_TRANG_THAI and tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Bot Offline</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Bot hi·ªán ƒëang t·∫Øt!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    uid = str(tin_nhan.from_user.id)
    if uid not in lich_su or not lich_su[uid]:
        noi_dung = (
            f"üåå <b>Prediction History</b> üåå\n"
            f"‚ïê‚ïê‚ïê L·ªãch S·ª≠ D·ª± ƒêo√°n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Kh√¥ng c√≥ l·ªãch s·ª≠ d·ª± ƒëo√°n!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, GiaoDienNguoiDung.tao_menu_tuong_tac())
        return
    lich_su_nguoi_dung = lich_su[uid][-10:]
    thong_bao_lich_su = [f"üåå <b>Prediction History (Top 10)</b> üåå\n‚ïê‚ïê‚ïê L·ªãch S·ª≠ D·ª± ƒêo√°n ‚ïê‚ïê‚ïê"]
    for idx, muc in enumerate(reversed(lich_su_nguoi_dung), 1):
        md5_ngan = f"{muc['md5'][:4]}...{muc['md5'][-4:]}"
        ket_qua = muc.get('du_doan', {}).get('cuoi', {}).get('ket_qua', 'N/A')
        thoi_gian_str = datetime.strptime(muc['thoi_gian'], "%Y-%m-%d %H:%M:%S").strftime("%d/%m %H:%M")
        phan_hoi = BI·ªÇU_T∆Ø·ª¢NG['dung'] if muc.get('la_dung') is True else BI·ªÇU_T∆Ø·ª¢NG['sai'] if muc.get('la_dung') is False else ""
        thong_bao_lich_su.append(f"{idx}. <code>{md5_ngan}</code> ‚Üí <b>{ket_qua}</b> {phan_hoi} | {thoi_gian_str}")
    noi_dung = "\n".join(thong_bao_lich_su)
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, GiaoDienNguoiDung.tao_menu_tuong_tac())
    theo_doi_hoat_dong(tin_nhan.from_user.id, "l·ªãch_s·ª≠")

@bot.message_handler(commands=['moi'])
def xu_ly_moi(tin_nhan):
    if not SERVER_TRANG_THAI and tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Bot Offline</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Bot hi·ªán ƒëang t·∫Øt!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    user_id = tin_nhan.from_user.id
    lien_ket_moi = f"https://t.me/{TEN_BOT}?start={user_id}"
    noi_dung = (
        f"üåå <b>Invite Friends</b> üåå\n"
        f"‚ïê‚ïê‚ïê M·ªùi B·∫°n B√® ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['moi_ban']} Link m·ªùi: <code>{lien_ket_moi}</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} M·ªùi 1 b·∫°n nh·∫≠n VIP 1 ng√†y!\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['moi_ban']} T·ªïng l∆∞·ª£t m·ªùi: <code>{len(moi_ban_db.get(str(user_id), []))}</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, GiaoDienNguoiDung.tao_menu_tuong_tac())
    theo_doi_hoat_dong(tin_nhan.from_user.id, "m·ªùi")

@bot.message_handler(commands=['dao'])
def xu_ly_dao(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    global che_do_dao
    che_do_dao = not che_do_dao
    cau_hinh_db['che_do_dao'] = che_do_dao
    CoSoDuLieu.luu(cau_hinh_db, 'cau_hinh')
    trang_thai = "B·∫¨T" if che_do_dao else "T·∫ÆT"
    noi_dung = (
        f"üåå <b>Reverse Mode</b> üåå\n"
        f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} Ch·∫ø ƒë·ªô ƒë·∫£o: <code>{trang_thai}</code>"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, f"ch·∫ø_ƒë·ªô_ƒë·∫£o:{trang_thai}")

@bot.message_handler(commands=['tao_ma'])
def xu_ly_tao_ma(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    phan = tin_nhan.text.split()
    if len(phan) != 4:
        noi_dung = (
            f"üåå <b>L·ªói C√∫ Ph√°p</b> üåå\n"
            f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Nh·∫≠p: /tao_ma [m√£] [ng√†y] [l∆∞·ª£t]\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    ma_ten = phan[1].upper()
    ngay = int(phan[2])
    so_lan_su_dung_toi_da = int(phan[3])
    tao_ma_vip(ma_ten, ngay, so_lan_su_dung_toi_da)
    noi_dung = (
        f"üåå <b>Create VIP Code</b> üåå\n"
        f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} ƒê√£ t·∫°o m√£ <code>{ma_ten}</code>!\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['dong_ho']} Th·ªùi h·∫°n: <code>{ngay} ng√†y</code>\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} L∆∞·ª£t s·ª≠ d·ª•ng: <code>{so_lan_su_dung_toi_da}</code>"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, f"t·∫°o_m√£:{ma_ten}")

@bot.message_handler(commands=['danh_sach_ma'])
def xu_ly_danh_sach_ma(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    if not ma_vip_db:
        noi_dung = (
            f"üåå <b>Danh S√°ch M√£ VIP</b> üåå\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Kh√¥ng c√≥ m√£ VIP n√†o!"
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    danh_sach = [f"üåå <b>VIP Code List</b> üåå\n‚ïê‚ïê‚ïê Danh S√°ch M√£ VIP ‚ïê‚ïê‚ïê"]
    for ma, chi_tiet in ma_vip_db.items():
        danh_sach.append(
            f"{BI·ªÇU_T∆Ø·ª¢NG['moi']} M√£: <code>{ma}</code>\n"
            f"   {BI·ªÇU_T∆Ø·ª¢NG['dong_ho']} Th·ªùi h·∫°n: <code>{chi_tiet['days']} ng√†y</code>\n"
            f"   {BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} L∆∞·ª£t d√πng: <code>{chi_tiet['so_lan_su_dung']}/{chi_tiet['so_lan_su_dung_toi_da']}</code>\n"
            f"   {BI·ªÇU_T∆Ø·ª¢NG['thoi_gian']} T·∫°o: <code>{chi_tiet['ngay_tao']}</code>"
        )
    noi_dung = "\n\n".join(danh_sach)
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, "danh_sach_ma")

@bot.message_handler(commands=['kich_hoat'])
def xu_ly_kich_hoat(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    phan = tin_nhan.text.split()
    if len(phan) != 3:
        noi_dung = (
            f"üåå <b>L·ªói C√∫ Ph√°p</b> üåå\n"
            f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Nh·∫≠p: /kich_hoat [id] [ng√†y]\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    uid = phan[1]
    try:
        ngay = int(phan[2])
        ngay_het_han = kich_hoat_vip(uid, ngay, mo_rong=True)
        try:
            bot.send_message(
                uid,
                f"üåå <b>VIP K√≠ch Ho·∫°t</b> üåå\n‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
                f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} VIP ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t {ngay} ng√†y!\n"
                f"{BI·ªÇU_T∆Ø·ª¢NG['dong_ho']} H·∫øt h·∫°n: <code>{ngay_het_han}</code>",
                parse_mode="HTML"
            )
        except:
            pass
        noi_dung = (
            f"üåå <b>Qu·∫£n L√Ω VIP</b> üåå\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} ƒê√£ k√≠ch ho·∫°t VIP cho ID <code>{uid}</code> {ngay} ng√†y!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['dong_ho']} H·∫øt h·∫°n: <code>{ngay_het_han}</code>"
        )
    except ValueError:
        noi_dung = (
            f"üåå <b>L·ªói C√∫ Ph√°p</b> üåå\n"
            f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} S·ªë ng√†y ph·∫£i l√† s·ªë nguy√™n!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, f"kich_hoat_vip:{uid}")

@bot.message_handler(commands=['huy_kich_hoat'])
def xu_ly_huy_kich_hoat(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    phan = tin_nhan.text.split()
    if len(phan) != 2:
        noi_dung = (
            f"üåå <b>L·ªói C√∫ Ph√°p</b> üåå\n"
            f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Nh·∫≠p: /huy_kich_hoat [id]\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    uid = phan[1]
    if uid in nguoi_dung:
        nguoi_dung[uid]["vip_kich_hoat"] = False
        nguoi_dung[uid]["vip_het_han"] = "N/A"
        CoSoDuLieu.luu(nguoi_dung, 'nguoi_dung')
        try:
            bot.send_message(
                uid,
                f"üåå <b>VIP ƒê√£ H·ªßy</b> üåå\n‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
                f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} T√†i kho·∫£n VIP c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy!",
                parse_mode="HTML"
            )
        except:
            pass
        noi_dung = (
            f"üåå <b>Qu·∫£n L√Ω VIP</b> üåå\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} ƒê√£ h·ªßy VIP c·ªßa ID <code>{uid}</code>"
        )
    else:
        noi_dung = (
            f"üåå <b>Qu·∫£n L√Ω VIP</b> üåå\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} ID <code>{uid}</code> kh√¥ng t·ªìn t·∫°i!"
        )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, f"huy_vip:{uid}")

@bot.message_handler(commands=['gui'])
def xu_ly_gui(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    thong_diep = " ".join(tin_nhan.text.split()[1:])
    if not thong_diep:
        noi_dung = (
            f"üåå <b>L·ªói C√∫ Ph√°p</b> üåå\n"
            f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Nh·∫≠p: /gui [th√¥ng_ƒëi·ªáp]\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    so_luong_gui = 0
    for uid in nguoi_dung:
        try:
            bot.send_message(
                uid,
                f"üåå <b>Th√¥ng B√°o H·ªá Th·ªëng</b> üåå\n‚ïê‚ïê‚ïê N·ªôi Dung ‚ïê‚ïê‚ïê\n"
                f"{BI·ªÇU_T∆Ø·ª¢NG['phat_tin']} {thong_diep}\n"
                f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}",
                parse_mode="HTML"
            )
            so_luong_gui += 1
            time.sleep(0.05)  # Tr√°nh rate limit
        except:
            continue
    noi_dung = (
        f"üåå <b>Broadcast Message</b> üåå\n"
        f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} ƒê√£ g·ª≠i ƒë·∫øn <code>{so_luong_gui}</code> ng∆∞·ªùi d√πng!"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
    theo_doi_hoat_dong(tin_nhan.from_user.id, f"ph√°t_tin:{so_luong_gui}")

@bot.message_handler(commands=['phan_tich'])
def xu_ly_phan_tich(tin_nhan):
    if not SERVER_TRANG_THAI and tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Bot Offline</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} Bot hi·ªán ƒëang t·∫Øt!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    noi_dung = (
        f"üåå <b>Ph√¢n T√≠ch MD5</b> üåå\n"
        f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['phan_tich']} G·ª≠i m√£ MD5 (32 k√Ω t·ª±) ƒë·ªÉ ph√¢n t√≠ch!\n"
        f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
    )
    gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, GiaoDienNguoiDung.tao_menu_tuong_tac())
    theo_doi_hoat_dong(tin_nhan.from_user.id, "phan_tich")

@bot.callback_query_handler(func=lambda call: True)
async def xu_ly_callback(call):
    if call.data == "x√°c_minh_nh√≥m":
        nhom_thieu = await kiem_tra_tham_gia_nhom(call.from_user.id)
        if nhom_thieu:
            noi_dung = (
                f"üåå <b>X√°c Minh Nh√≥m</b> üåå\n"
                f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
                f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n ch∆∞a tham gia ƒë·ªß nh√≥m:\n"
                f"{''.join(f'{BI·ªÇU_T∆Ø·ª¢NG['nhom']} {nhom}\n' for nhom in nhom_thieu)}"
                f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Tham gia r·ªìi nh·∫•n l·∫°i n√∫t!"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['nhom']} X√°c Minh L·∫°i", callback_data="x√°c_minh_nh√≥m"))
        else:
            thanh_cong, thong_bao = su_dung_ma_vip(MA_VIP, call.from_user.id)
            noi_dung = (
                f"üåå <b>X√°c Minh Th√†nh C√¥ng</b> üåå\n"
                f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
                f"{thong_bao}\n"
                f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} D√πng menu ƒë·ªÉ kh√°m ph√°!"
            )
            markup = GiaoDienNguoiDung.tao_menu_tuong_tac()
        await bot.edit_message_text(
            noi_dung,
            call.message.chat.id,
            call.message.message_id,
            parse_mode="HTML",
            reply_markup=markup
        )
        theo_doi_hoat_dong(call.from_user.id, "x√°c_minh_nh√≥m")
    elif call.data == "menu_tro_giup":
        noi_dung = (
            f"üåå <b>H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng</b> üåå\n"
            f"‚ïê‚ïê‚ïê L·ªánh Ng∆∞·ªùi D√πng ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['phan_tich']} /start - B·∫Øt ƒë·∫ßu & nh·∫≠n VIP\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['vip']} /ma [m√£] - K√≠ch ho·∫°t VIP\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_ke']} /thong_ke - Xem th·ªëng k√™ c√° nh√¢n\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['lich_su']} /lich_su - Xem l·ªãch s·ª≠ d·ª± ƒëo√°n\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['moi_ban']} /moi - M·ªùi b·∫°n b√®\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['tro_giup']} /tro_giup - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['nguoi_dung']} /id - Xem th√¥ng tin t√†i kho·∫£n\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['phan_tich']} G·ª≠i m√£ MD5 32 k√Ω t·ª± ƒë·ªÉ ph√¢n t√≠ch\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
        )
        await bot.edit_message_text(
            noi_dung,
            call.message.chat.id,
            call.message.message_id,
            parse_mode="HTML",
            reply_markup=GiaoDienNguoiDung.tao_menu_tuong_tac()
        )
        theo_doi_hoat_dong(call.from_user.id, "menu_tro_giup")
    elif call.data == "menu_phan_tich":
        noi_dung = (
            f"üåå <b>Ph√¢n T√≠ch MD5</b> üåå\n"
            f"‚ïê‚ïê‚ïê H∆∞·ªõng D·∫´n ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['phan_tich']} G·ª≠i m√£ MD5 (32 k√Ω t·ª±) ƒë·ªÉ ph√¢n t√≠ch!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
        )
        await bot.edit_message_text(
            noi_dung,
            call.message.chat.id,
            call.message.message_id,
            parse_mode="HTML",
            reply_markup=GiaoDienNguoiDung.tao_menu_tuong_tac()
        )
        theo_doi_hoat_dong(call.from_user.id, "menu_phan_tich")
    elif call.data in ["dung", "sai"]:
        uid = str(call.from_user.id)
        if uid in lich_su:
            for muc in lich_su[uid]:
                if muc.get("cho_phan_hoi", False):
                    muc["la_dung"] = call.data == "dung"
                    muc["cho_phan_hoi"] = False
                    CoSoDuLieu.luu(lich_su, 'lich_su')
                    break
        noi_dung = (
            f"üåå <b>Ph·∫£n H·ªìi</b> üåå\n"
            f"‚ïê‚ïê‚ïê K·∫øt Qu·∫£ ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thanh_cong']} C·∫£m ∆°n ph·∫£n h·ªìi c·ªßa b·∫°n!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Ti·∫øp t·ª•c ph√¢n t√≠ch b·∫±ng c√°ch g·ª≠i MD5!"
        )
        await bot.edit_message_text(
            noi_dung,
            call.message.chat.id,
            call.message.message_id,
            parse_mode="HTML",
            reply_markup=GiaoDienNguoiDung.tao_menu_tuong_tac()
        )
        theo_doi_hoat_dong(call.from_user.id, f"phan_hoi:{call.data}")

@bot.message_handler(content_types=['text'])
def xu_ly_danh_sach_ma(tin_nhan):
    if tin_nhan.from_user.id != ADMIN_ID:
        noi_dung = (
            f"üåå <b>Truy C·∫≠p B·ªã T·ª´ Ch·ªëi</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng c√≥ quy·ªÅn admin!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    uid = str(tin_nhan.from_user.id)
    if uid in nguoi_dung and nguoi_dung[uid].get("bi_cam", False):
        noi_dung = (
            f"üåå <b>T√†i Kho·∫£n B·ªã C·∫•m</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng bot!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Li√™n h·ªá {LIEN_HE_HO_TRO} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung)
        return
    if not kiem_tra_vip_kich_hoat(tin_nhan.from_user.id):
        noi_dung = (
            f"üåå <b>Truy C·∫≠p H·∫°n Ch·∫ø</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} B·∫°n c·∫ßn VIP ƒë·ªÉ ph√¢n t√≠ch MD5!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} D√πng /ma ho·∫∑c /start ƒë·ªÉ k√≠ch ho·∫°t VIP.\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, GiaoDienNguoiDung.tao_menu_tuong_tac())
        return
    md5_input = tin_nhan.text.strip().lower()
    if len(md5_input) != 32 or not re.match(r'^[a-f0-9]{32}$', md5_input):
        noi_dung = (
            f"üåå <b>L·ªói ƒê·ªãnh D·∫°ng</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} M√£ MD5 ph·∫£i l√† 32 k√Ω t·ª± hex!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} V√≠ d·ª•: <code>098f6bcd4621d373cade4e832627b4f6</code>\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, GiaoDienNguoiDung.tao_menu_tuong_tac())
        return
    cho_phan_hoi, md5_cho = kiem_tra_trang_thai_phan_hoi(tin_nhan.from_user.id)
    if cho_phan_hoi and md5_cho != md5_input:
        noi_dung = (
            f"üåå <b>Ph·∫£n H·ªìi ƒêang Ch·ªù</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['canh_bao']} Vui l√≤ng ph·∫£n h·ªìi k·∫øt qu·∫£ cho MD5 <code>{md5_cho[:8]}...{md5_cho[-8:]}</code>!\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Nh·∫•n n√∫t 'ƒê√∫ng' ho·∫∑c 'Sai' tr∆∞·ªõc khi ph√¢n t√≠ch ti·∫øp."
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['dung']} ƒê√∫ng", callback_data="dung"),
            types.InlineKeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['sai']} Sai", callback_data="sai")
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, markup)
        return
    try:
        phan_tich = PhanTichMD5.dong_co_sieu_tri_tue(md5_input)
        bao_cao = GiaoDienNguoiDung.tao_bao_cao_phan_tich(md5_input, phan_tich)
        luu_du_doan(tin_nhan.from_user.id, md5_input, phan_tich)
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['dung']} ƒê√∫ng", callback_data="dung"),
            types.InlineKeyboardButton(f"{BI·ªÇU_T∆Ø·ª¢NG['sai']} Sai", callback_data="sai")
        )
        noi_dung = bao_cao + f"\n{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} Ph·∫£n h·ªìi k·∫øt qu·∫£ ƒë·ªÉ c·∫£i thi·ªán h·ªá th·ªëng!"
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, markup)
        theo_doi_hoat_dong(tin_nhan.from_user.id, f"phan_tich_md5:{md5_input}")
    except ValueError as e:
        noi_dung = (
            f"üåå <b>L·ªói Ph√¢n T√≠ch</b> üåå\n"
            f"‚ïê‚ïê‚ïê Th√¥ng B√°o ‚ïê‚ïê‚ïê\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['loi']} {str(e)}\n"
            f"{BI·ªÇU_T∆Ø·ª¢NG['thong_tin']} H·ªó tr·ª£: {LIEN_HE_HO_TRO}"
        )
        gui_phan_hoi_dong_bo(tin_nhan.chat.id, tin_nhan, noi_dung, GiaoDienNguoiDung.tao_menu_tuong_tac())

# ==============================================
# KH·ªûI CH·∫†Y BOT
# ==============================================
if __name__ == "__main__":
    print(f"üåå {TEN_BOT} ƒëang kh·ªüi ƒë·ªông...")
    while True:
        try:
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e:
            print(f"L·ªói: {e}")
            time.sleep(5)